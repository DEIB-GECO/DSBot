# en_wf.yaml

## Where the samples will be written
save_data: wf/run/example
## Where the vocab(s) will be written
src_vocab: wf/run/example.vocab.ieee.src
tgt_vocab: wf/run/example.vocab.ieee.tgt
# Prevent overwriting existing files in the folder
overwrite: False

# Corpus opts:
data:
    corpus_1:
        path_src: wf/src-train2-shuffle_replace.txt
        path_tgt: wf/tgt-train2-shuffle.txt
    valid:
        path_src: wf/src-val-kaggle.txt
        path_tgt: wf/tgt-val-kaggle.txt
# Vocabulary files that were just created
src_vocab: wf/run/example.vocab.ieee.src
tgt_vocab: wf/run/example.vocab.ieee.tgt

# this means embeddings will be used for both encoder and decoder sides
both_embeddings: ./wf/glove_new_50.txt

# to set src and tgt embeddings separately:
#src_embeddings: ./wf/try_glove_new.txt
#tgt_embeddings: ./wf/try_glove_new.txt

# supported types: GloVe, word2vec
embeddings_type: "word2vec"

# word_vec_size need to match with the pretrained embeddings dimensions
word_vec_size: 64

# Train on a single GPU
world_size: 1
#gpu_ranks: [0]

# Where to save the checkpoints
save_model: wf/run/model_ieee
save_checkpoint_steps: 500
train_steps: 1000
valid_steps: 500

# Optimization
model_dtype: "fp32"
optim: "adam"
learning_rate: 2
warmup_steps: 500
decay_method: "noam"
adam_beta2: 0.998
max_grad_norm: 0
label_smoothing: 0.1
param_init: 0
param_init_glorot: true
normalization: "tokens"

# Model
encoder_type: transformer
decoder_type: transformer
position_encoding: true
enc_layers: 2
dec_layers: 2
rnn_size: 64
transformer_ff: 512
dropout_steps: [0]
dropout: [0.1]
attention_dropout: [0.1]
heads: 8